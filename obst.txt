#include <iostream>
#include <climits>
using namespace std;

// Structure for a binary tree node
struct Node {
    int key;
    Node* left;
    Node* right;
};

// Utility function to create a new BST node
Node* newNode(int key)
{
    Node* node = new Node();
    node->key = key;
    node->left = node->right = NULL;
    return node;
}

// A utility function to get sum of array elements freq[i] to freq[j]
int sum(int freq[], int i, int j)
{
    int s = 0;
    for (int k = i; k <= j; k++)
        s += freq[k];
    return s;
}

// A recursive function to calculate the cost of optimal binary search tree
int optCost(int freq[], int i, int j)
{
    // Base cases
    if (j < i)  // no elements in this subarray
        return 0;
    if (j == i) // one element in this subarray
        return freq[i];

    // Get sum of freq[i], freq[i+1], ... freq[j]
    int fsum = sum(freq, i, j);

    // Initialize minimum value
    int min = INT_MAX;

    // One by one consider all elements as root and recursively find cost
    // of the BST, compare the cost with min and update min if needed
    for (int r = i; r <= j; ++r) {
        int cost = optCost(freq, i, r - 1) +
                   optCost(freq, r + 1, j);
        if (cost < min)
            min = cost;
    }

    // Return minimum value
    return min + fsum;
}

// Construct the optimal BST and return the root node
Node* constructOBST(int keys[], int freq[], int i, int j)
{
    // Base cases
    if (j < i)
        return NULL;
    if (j == i)
        return newNode(keys[i]);

    // Find index of the minimum cost key
    int minIndex = -1;
    int minCost = INT_MAX;
    for (int k = i; k <= j; k++) {
        int cost = optCost(freq, i, j);
        if (cost < minCost) {
            minCost = cost;
            minIndex = k;
        }
    }

    // Construct the root node with the minimum cost key
    Node* root = newNode(keys[minIndex]);

    // Recursively construct the left and right subtrees
    root->left = constructOBST(keys, freq, i, minIndex - 1);
    root->right = constructOBST(keys, freq, minIndex + 1, j);

    return root;
}

// Print the inorder traversal of the BST
void printInorder(Node* root)
{
    if (root == NULL)
        return;
    printInorder(root->left);
    cout << root->key << " ";
    printInorder(root->right);
}

// The main function that calculates the minimum cost of a Binary Search Tree
int optimalSearchTree(int keys[], int freq[], int n)
{
    // Here array keys[] is assumed to be sorted in increasing order.
    // If keys[] is not sorted, then add code to sort keys and rearrange freq[] accordingly.
    int cost = optCost(freq, 0, n - 1);
    Node* root = constructOBST(keys, freq, 0, n - 1);

    cout << "Inorder traversal of the Optimal BST: ";
    printInorder(root);
    cout << endl;

    return cost;
}

// Driver Code
int main()
{
    int keys[] = { 10, 12, 20 };
    int freq[] = { 34, 8, 50 };
    int n = sizeof(keys) / sizeof(keys[0]);
    cout << "Cost of Optimal BST is " << optimalSearchTree(keys, freq, n);

    return 0;
}
